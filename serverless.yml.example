# This is a rough example of using Okta as the authorization server as part of a SMART/FHIR deployment.
# It includes the following features:
# - standalone launch with launch parameters
# - a patient picker screen and OAuth2 scope selection and consent.
# - applicable proxies for properly handling public client authentication as well as returning launch parameters in a flexible way.
# - passthrough API endpoints for demo data, hosted by HAPI.org.

service: okta-smartfhir-auth

provider:
  name: google
  runtime: nodejs12
  stage: dev
  region: <yourgpregion>
  project: <yourgcpprojectid>
  credentials: <your gcp credentials>
  environment:
  #This variable will contain the live API URL (https://XXXXX.execute-api.us-east-1.amazonaws.com/dev)
  
    GATEWAY_URL: 'https://youroktadomain'
    AUTHZ_ISSUER: https://yourokstadomain/oauth2/yourserverid
    AUTHZ_SERVER: yourserverid
    OKTA_ORG: youroktadomain
    STATE_COOKIE_SIGNATURE_KEY: JustPutAReallyLongValueHere!
    EXPECTED_AUD_VALUE: https://youroktadomain
    #replace above with final gateway url from AWS (include /sandbox)
    #TODO: Get rid of.
    API_KEY: <your okta api key>
    
    PICKER_DISPLAY_NAME: <Your Organization Name> Patient Selection
    PICKER_CLIENT_ID: <An Okta client id for the patient picker app>
    PICKER_CLIENT_SECRET: <your Okta client secret for the same app>
    #Firestore Settings
    CACHE_TABLE_NAME: 'refreshTokenCache'
    CACHE_TTL_MINS: "1440"
  
  # steps:
  #   - name: "gcr.io/cloud-builders/npm"
  #     args: ["install"]
  #     dir: "YOUR_PATH"

frameworkVersion: '1.83.2'
plugins:
  - serverless-google-cloudfunctions
package:
    exclude:
    - node_modules/**
    - .gitignore
    - .git/**
    - aws/**
    - openapi3.yaml
    - .keys
    

#https://www.serverless.com/framework/docs/providers/google/guide/events/#configuration
#Google Functions
functions:

##METADATA ENDPOINTS
  smart-config-endpoint:
    handler: smartConfigHandler
    events:
        - http: /.well-known/smart-configuration
            
  metadata-endpoint:          
    handler: metadataHandler
    events:
      - http: /metadata
     
  keys_endpoint:
    handler: keysHandler
    events:
      - http: /keys
          
#AUTHORIZE ENDPOINTS
  smart-authorize-proxy:
    handler: authorizeHandler
    events:
      - http: /authorize


  picker-oidc-callback:
    handler: pickerCallbackHandler
    events:
      - http: /picker_oidc_callback
      
  smart-proxy-callback:
    handler: authorizeCallbackHandler
    events:
      - http: /smart_proxy_callback


#TOKEN ENDPOINT
  smart-token-proxy:
    handler: tokenHandler
    events:
      - http: /token         
          
# ##PATIENT PICKER UI          
  patient_picker_get:
    handler: patientPickerGetHandler
    events:
      - http: /patient_authorization
  
  patient_picker_post:
    handler: patientPickerPostHandler          
    events:
      - http: /patient_authorization
         

##TOKEN HOOK  
  token_hook:
    handler: tokenHookHandler
    events:
      - http: /tokenhook
         
 
 ##MOCK PATIENT API 
  mock_patient_service:
    handler: mockPatientServiceHandler
    events:
      - http: /patientMockService